package extempfile;

import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import rss.Feed;
import rss.FeedItem;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainScreen.java
 *
 * Created on Dec 1, 2011, 10:04:30 PM
 */
/**
 *
 * @author Brad
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {






        setIconImage(Toolkit.getDefaultToolkit().getImage("cornericon.gif"));
        try {

            urls.addAll(Arrays.asList(FileReaderWriter.readFileAsString(rssFile).split("\n")));

        } catch (Exception e) {
            handle(e);

        }



        importSettings();
        initComponents();
        feedList.setListData(urls.toArray());
        updater = null;




    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        feedListPane = new javax.swing.JScrollPane();
        feedList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        outputLabel = new javax.swing.JLabel();
        feedsLabel = new javax.swing.JLabel();
        seperator = new javax.swing.JSeparator();
        removeButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        updateCheck = new javax.swing.JCheckBox();
        updateTimeSlider = new javax.swing.JSlider();
        updateTimeLabel = new javax.swing.JLabel();
        seperator2 = new javax.swing.JSeparator();
        saveToFolderField = new javax.swing.JTextField();
        saveFileLabel = new javax.swing.JLabel();
        changeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        feedAddBox = new javax.swing.JTextArea();

        jButton1.setText("jButton1");

        jLabel1.setText("jLabel1");

        setTitle("ExtempFile");
        setResizable(false);

        feedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        feedListPane.setViewportView(feedList);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start Download");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        outputLabel.setText("Output:");

        feedsLabel.setText("Feeds:");

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        updateCheck.setText("Update every");
        updateCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateCheckStateChanged(evt);
            }
        });
        updateCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updateCheckItemStateChanged(evt);
            }
        });
        updateCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCheckActionPerformed(evt);
            }
        });

        updateTimeSlider.setMaximum(1440);
        updateTimeSlider.setMinimum(30);
        updateTimeSlider.setValue(30);
        updateTimeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateTimeSliderMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                updateTimeSliderMouseReleased(evt);
            }
        });
        updateTimeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateTimeSliderStateChanged(evt);
            }
        });

        updateTimeLabel.setText("30 min");

        saveToFolderField.setText(saveTo.toString());
        saveToFolderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFolderFieldActionPerformed(evt);
            }
        });
        saveToFolderField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                saveToFolderFieldInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        saveFileLabel.setText("Save files in:");

        changeButton.setText("Change");
        changeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                changeButtonMousePressed(evt);
            }
        });

        feedAddBox.setColumns(20);
        feedAddBox.setRows(5);
        jScrollPane2.setViewportView(feedAddBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seperator, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                    .addComponent(feedListPane, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(feedsLabel)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addComponent(removeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveFileLabel)
                        .addGap(6, 6, 6)
                        .addComponent(saveToFolderField, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton))
                    .addComponent(outputLabel)
                    .addComponent(seperator2, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(updateCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateTimeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                        .addComponent(updateTimeLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(feedsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveToFolderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveFileLabel)
                    .addComponent(changeButton)
                    .addComponent(stopButton)
                    .addComponent(startButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seperator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateCheck)
                    .addComponent(updateTimeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateTimeLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String[] feedURLs;
    Thread downloadThread;
    Timer updater;
    private ArrayList<String> urls = new ArrayList<String>();
    String saveTo;
    boolean makeLog = true;
    boolean overwriteExisting = false;
    Log log;
    File rssFile = new File("rss.txt");
    boolean downloadPDF = true;

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        downloadThread = new Thread(new Downloader());
        downloadThread.start();
        stopButton.setEnabled(true);
    }//GEN-LAST:event_startButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        getUrls().add(feedAddBox.getText());
        feedList.setListData(getUrls().toArray());
        try {
            writeRssList();
        } catch (IOException e) {
            handle(e);
        }
        feedAddBox.setText("");
        feedAddBox.setCaretPosition(0);

    }//GEN-LAST:event_addButtonActionPerformed
    private void trayIconActionPerformed(java.awt.event.ActionEvent evt) {
    }
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        Object[] selectedValues = feedList.getSelectedValues();
        for (Object s : selectedValues) {
            getUrls().remove(s.toString());
        }
        feedList.setListData(getUrls().toArray());
        try {
            writeRssList();
        } catch (IOException e) {
            handle(e);
        }

    }//GEN-LAST:event_removeButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed

        downloadThread.interrupt();

    }//GEN-LAST:event_stopButtonActionPerformed

    private void updateCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCheckActionPerformed
    }//GEN-LAST:event_updateCheckActionPerformed

    private void updateCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateCheckStateChanged
    }//GEN-LAST:event_updateCheckStateChanged

    private void updateCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_updateCheckItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updater = new Timer(true);
            updater.scheduleAtFixedRate(new DownloadTimerTask(), updateTimeSlider.getValue() * 60000, updateTimeSlider.getValue() * 60000);
        } else {
            updater.cancel();
        }

    }//GEN-LAST:event_updateCheckItemStateChanged

    private void updateTimeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateTimeSliderStateChanged
        int min = updateTimeSlider.getValue();
        if (min < 60) {
            updateTimeLabel.setText(min + " min");
        } else if (min < 1440) {
            int hours = (int) (min / 60);
            int minutes = min % 60;
            updateTimeLabel.setText(hours + " hr, " + minutes + " min");
        } else {
            updateTimeLabel.setText("1 day");
        }

    }//GEN-LAST:event_updateTimeSliderStateChanged

    private void updateTimeSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateTimeSliderMouseReleased
        if (updater != null) {
            updater.scheduleAtFixedRate(new DownloadTimerTask(), updateTimeSlider.getValue() * 60000, updateTimeSlider.getValue() * 60000);
        }
    }//GEN-LAST:event_updateTimeSliderMouseReleased

    private void updateTimeSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateTimeSliderMouseClicked
        if (updater != null) {
            updater.cancel();
        }
    }//GEN-LAST:event_updateTimeSliderMouseClicked

    private void saveToFolderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFolderFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveToFolderFieldActionPerformed

    private void saveToFolderFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_saveToFolderFieldInputMethodTextChanged
    }//GEN-LAST:event_saveToFolderFieldInputMethodTextChanged

    private void changeButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeButtonMousePressed

        saveTo = saveToFolderField.getText();
        exportSettings();
    }//GEN-LAST:event_changeButtonMousePressed
    private void writeRssList() throws IOException {
        String s = "";
        for (Object a : getUrls()) {
            s += a.toString() + "\n";
        }
        saveTextFile(s, rssFile);
    }

    /**
     * @param args the command line arguments
     *
     * public static void main(String[] args) throws FileNotFoundException {
     *
     * java.awt.EventQueue.invokeLater(new Runnable() {
     * @Override public void run() { new MainScreen().setVisible(true);
     *
     * }
     * }); }
     */
    private void importSettings() {
        String settingsString = "";
        try {
            settingsString = FileReaderWriter.readFileAsString("settings.conf");
        } catch (FileNotFoundException ex) {
            return;
        } catch (IOException ex) {
            handle(ex);
        }
        String[] settingsStringArray = settingsString.split("\n");
        for (String s : settingsStringArray) {
            if (s.indexOf("make_log") != -1) {
                if (s.substring(s.indexOf('=') + 1, s.indexOf(';')).equals("false")) {
                    makeLog = false;
                } else {
                    makeLog = true;
                }
            }
            if (s.indexOf("overwrite") != -1) {
                if (s.substring(s.indexOf('=') + 1, s.indexOf(';')).equals("false")) {
                    makeLog = false;
                } else {
                    makeLog = true;
                }
            }
            if (s.indexOf("download_as_pdf") != -1) {
                if (s.substring(s.indexOf('=') + 1, s.indexOf(';')).equals("false")) {
                    downloadPDF = false;
                } else {
                    downloadPDF = true;
                }
            }
            if (s.indexOf("save_location") != -1) {
                saveTo = s.substring(s.indexOf('=') + 1, s.indexOf(';'));
            }
            if (s.indexOf("rss_file") != -1) {
                rssFile = new File(s.substring(s.indexOf('=') + 1, s.indexOf(';')));
            }
            }
            }

    private void exportSettings() {
        FileReaderWriter rw = new FileReaderWriter();
        StringBuilder toExport = new StringBuilder("");
        toExport.append("save_location=").append(saveTo).append(";\n");
        toExport.append("make_log=").append(makeLog).append(";\n");
        toExport.append("overwrite=").append(overwriteExisting).append(";\n");
        toExport.append("rss_file=").append(rssFile.getPath()).append(";\n");
        try {
            rw.saveTextFile(toExport.toString(), "settings.conf");
        } catch (IOException ex) {
            handle(ex);
        }

    }

    private void checkStop() throws InterruptedException {
        if (Thread.currentThread().isInterrupted()) {
            throw new InterruptedException("Stopped by ifInterruptedStop()");
        }
    }

    private void handle(Exception e) {
        if (isVisible()) {
            output.append(e.toString());
            log.enterLog(e);


        } else {
            System.err.println(e.toString());
        }
    }

    public void saveTextFile(String input, String fileName) throws IOException {
        saveTextFile(input, new File(fileName));
    }

    public void saveTextFile(String input, File fileName) throws IOException {
        FileWriter outFile = new FileWriter(fileName);
        PrintWriter out = new PrintWriter(outFile);
        int nextChar;
        int bytes = 0;
        out.print(input);
        out.close();
    }

    /**
     * @return the urls
     */
    public ArrayList<String> getUrls() {
        return urls;
    }

    /**
     * @param urls the urls to set
     */
    public void setUrls(ArrayList<String> urls) {
        this.urls = urls;
    }

    private class Downloader implements Runnable {

        @Override
        public void run() {
            // try {
            DownloadProcedure procedure = new DownloadProcedure();
            procedure.startDownload();
            //} catch (Exception e) {
            //    handle(e);
            //  }
        }
    }

    private class DownloadTimerTask extends TimerTask {

        @Override
        public void run() {
            try {
                DownloadProcedure procedure = new DownloadProcedure(rssFile);
                procedure.startDownload();
            } catch (Exception e) {
                handle(e);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JTextArea feedAddBox;
    private javax.swing.JList feedList;
    private javax.swing.JScrollPane feedListPane;
    private javax.swing.JLabel feedsLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel saveFileLabel;
    private javax.swing.JTextField saveToFolderField;
    private javax.swing.JSeparator seperator;
    private javax.swing.JSeparator seperator2;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox updateCheck;
    private javax.swing.JLabel updateTimeLabel;
    private javax.swing.JSlider updateTimeSlider;
    // End of variables declaration//GEN-END:variables

    public class DownloadProcedure {

        private File sourceFile;

        public DownloadProcedure() {
            this(new File("rss.txt"));
        }

        public DownloadProcedure(String sourceFileName) {
            this(new File(sourceFileName));
        }

        public DownloadProcedure(File source) {
            sourceFile = source;
        }

        /**
         * @return the source file
         */
        public File getSourceFile() {
            return sourceFile;
        }

        /**
         * @param sourcefile the source file to set
         */
        public void setSourceFile(File sourcefile) {
            this.sourceFile = sourcefile;
        }

        private void startDownload() {

            log = new Log();

            File path = new File(saveTo);
            if (!path.exists()) {
                boolean mkdirs = new File(saveTo).mkdirs();
            }

            int feeds = 0;
            int items = 0;
            int totalBytes = 0;

            try {


                startButton.setEnabled(false);
                stopButton.setEnabled(true);
                feedLoop:
                for (String s : getUrls()) {
                    checkStop();
                    if (s.indexOf("http://") < 0) {
                        s = "http://" + s;
                    }

                    feeds++;
                    Feed feed = null;
                    try {
                        feed = new Feed(new URL(s), saveTo);
                    } catch (IOException e) {
                        handle(e);
                        continue feedLoop;
                    }
                    totalBytes += feed.getFullText().getBytes().length;
                    output.append("Downloaded feed: " + feed.getTitle() + "\n");
                    output.setCaretPosition(output.getDocument().getLength());
                    try {
                        feed.createFeedItemList();
                    } catch (IOException e) {

                        handle(e);
                    }
                    int i = 0;
                    itemLoop:
                    for (FeedItem f : feed.getFeedItemList()) {
                        checkStop();
                        output.append("Downloading article from " + feed.getTitle() + ": " + f.getTitle() + "\n");

                        long bytesDown = 0;
                        try {
                            if(downloadPDF){
                                bytesDown = f.downloadAsPDF();
                            } else {
                                bytesDown = f.download();
                            }
                        } catch (Exception e) {
                            handle(e);
                        }
                        if (bytesDown > 0) {
                            totalBytes += bytesDown;

                            output.append("Download complete! (" + bytesDown + " bytes)" + "\n");


                            items++;

                        } else {
                            output.append("Skipping....\n");

                        }

                        output.setCaretPosition(output.getDocument().getLength());
                    }





                }





                String summary = "";
                try {
                    summary = log.close(totalBytes, feeds, items, false, makeLog);
                } catch (FileNotFoundException e) {
                    handle(e);
                } catch (IOException e) {
                    handle(e);
                }
                output.append(summary);
                output.setCaretPosition(output.getDocument().getLength());
                log.enterLog(summary);
                startButton.setEnabled(true);
                stopButton.setEnabled(false);

                return;

            } catch (InterruptedException e) {
                String summary = "";
                try {
                    summary = log.close(totalBytes, feeds, items, true, makeLog);
                } catch (FileNotFoundException ex) {
                    handle(ex);
                } catch (IOException ex) {
                    handle(ex);
                }
                output.append(summary);
                output.setCaretPosition(output.getDocument().getLength());
                log.enterLog(summary);
                startButton.setEnabled(true);
                stopButton.setEnabled(false);

                return;
            }



        }
    }
}
